package Lectione.Lectione48;

public class Main {

    public int findMaxElt(int[] ints, int n){
        int max = ints[0]; // 2 действия

        for(int i = 0; i < n; i++){//2 действия до запуска цикла - присвоение и проверка условия окончания цикла 
                                    //f(n) = 4 + 2n - необходимое количество инструкций для for с пустым телом
            if(ints[i] > max){      //f(n) = 4 + 2n + 4n = 4 + 6n - рассматривается наихудший сценарий, когда переменная переписывается для каждой итерации 
                max = ints[i];
            }
        }
        return max;
    }
   
//f(n) = 4 + 2n + 4n = 4 + 6n
//когда n сильно возрастает, цыфры можно не учитывать
// f(n) = 6n;
//f(n)= n;
//f(n) = 9n + 24            ->  f(n) = n
//f(n) =234                 -> f(n) = 1
//f(n) = n^2 + 3n + 368     -> f(n) = n^2 - случай когда цыкл в цыкле
//f(n) = n^3 + 2000n + 300  -> f(n) = n^3 - случай когда 2 цыкла в цыкле

/*
 O(1) - алгоритм с сложностью 1
 О(n) - алгоритм с сложностью O(n)
 О(n^2) - алгоритм с сложностью n^2
 O(log n) - логарифмическая сложность 
 2^x = 1024
 2^10 = 1024 
 логарифм 1024 это степень в которую надо возвесити 2 чтобы получить 1024

 log(1024) = 10
 log(64) =  6
 2^6 = 64
 2^x = 4

 

 */




}
